/**
 * Gemini AI Service
 * Service ƒë·ªÉ k·∫øt n·ªëi v√† giao ti·∫øp v·ªõi Gemini 2.0 API
 */

class GeminiAIService {
    constructor() {
        this.apiKey = GEMINI_CONFIG.API_KEY;
        this.baseUrl = GEMINI_CONFIG.BASE_URL;
        this.conversationHistory = [];
        this.isProcessing = false;
        this.retryCount = 0;
        
        // Ki·ªÉm tra API key
        if (!this.apiKey || this.apiKey === 'YOUR_GEMINI_API_KEY') {
            console.warn('‚ö†Ô∏è Gemini API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. S·ª≠ d·ª•ng mock responses.');
            this.useMockResponses = true;
        } else {
            this.useMockResponses = false;
        }
    }

    /**
     * G·ª≠i tin nh·∫Øn ƒë·∫øn Gemini AI
     * @param {string} message - Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
     * @param {string} pageContext - Ng·ªØ c·∫£nh trang hi·ªán t·∫°i
     * @returns {Promise<string>} - Ph·∫£n h·ªìi t·ª´ AI
     */
    async sendMessage(message, pageContext = '') {
        if (this.isProcessing) {
            throw new Error('ƒêang x·ª≠ l√Ω tin nh·∫Øn kh√°c, vui l√≤ng ƒë·ª£i...');
        }

        this.isProcessing = true;

        try {
            // N·∫øu kh√¥ng c√≥ API key, s·ª≠ d·ª•ng mock response
            if (this.useMockResponses) {
                return await this.getMockResponse(message, pageContext);
            }

            // T·∫°o system prompt
            const systemPrompt = getSystemPrompt();
            
            // T·∫°o context t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i
            const contextMessages = this.buildContextMessages(systemPrompt, message, pageContext);

            // G·ª≠i request ƒë·∫øn Gemini API
            const response = await this.callGeminiAPI(contextMessages);
            
            // L∆∞u v√†o l·ªãch s·ª≠
            this.addToHistory('user', message);
            this.addToHistory('assistant', response);
            
            this.retryCount = 0; // Reset retry count on success
            return response;

        } catch (error) {
            console.error('Gemini AI Error:', error);
            
            // Retry logic
            if (this.retryCount < GEMINI_CONFIG.MAX_RETRIES) {
                this.retryCount++;
                console.log(`Retry attempt ${this.retryCount}/${GEMINI_CONFIG.MAX_RETRIES}`);
                
                await this.delay(GEMINI_CONFIG.RETRY_DELAY * this.retryCount);
                return await this.sendMessage(message, pageContext);
            }
            
            // Fallback to mock response on error
            console.log('Falling back to mock response due to API error');
            return await this.getMockResponse(message, pageContext);
            
        } finally {
            this.isProcessing = false;
        }
    }

    /**
     * G·ªçi Gemini API
     * @param {Array} messages - Danh s√°ch tin nh·∫Øn
     * @returns {Promise<string>} - Ph·∫£n h·ªìi t·ª´ API
     */
    async callGeminiAPI(messages) {
        const requestBody = {
            contents: messages,
            generationConfig: {
                temperature: GEMINI_CONFIG.TEMPERATURE,
                topK: GEMINI_CONFIG.TOP_K,
                topP: GEMINI_CONFIG.TOP_P,
                maxOutputTokens: GEMINI_CONFIG.MAX_TOKENS,
            },
            safetySettings: [
                {
                    category: "HARM_CATEGORY_HARASSMENT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    category: "HARM_CATEGORY_HATE_SPEECH",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                }
            ]
        };

        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), GEMINI_CONFIG.TIMEOUT);

        try {
            const response = await fetch(`${this.baseUrl}?key=${this.apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(`API Error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
            }

            const data = await response.json();
            
            if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
                throw new Error('Invalid response format from Gemini API');
            }

            return data.candidates[0].content.parts[0].text;

        } catch (error) {
            clearTimeout(timeoutId);
            
            if (error.name === 'AbortError') {
                throw new Error('Request timeout - API took too long to respond');
            }
            
            throw error;
        }
    }

    /**
     * X√¢y d·ª±ng context messages cho API
     * @param {string} systemPrompt - System prompt
     * @param {string} userMessage - Tin nh·∫Øn ng∆∞·ªùi d√πng
     * @param {string} pageContext - Ng·ªØ c·∫£nh trang
     * @returns {Array} - Danh s√°ch messages
     */
    buildContextMessages(systemPrompt, userMessage, pageContext) {
        const messages = [];

        // System message (as user message v·ªõi prefix)
        messages.push({
            role: "user",
            parts: [{ text: `[SYSTEM] ${systemPrompt}` }]
        });

        // Add conversation history (last 5 exchanges)
        const recentHistory = this.conversationHistory.slice(-10);
        recentHistory.forEach(item => {
            messages.push({
                role: item.role === 'user' ? 'user' : 'model',
                parts: [{ text: item.content }]
            });
        });

        // Current user message with page context
        const contextualMessage = pageContext 
            ? `[CONTEXT: ${pageContext}] ${userMessage}`
            : userMessage;

        messages.push({
            role: "user",
            parts: [{ text: contextualMessage }]
        });

        return messages;
    }

    /**
     * Mock responses khi kh√¥ng c√≥ API key
     * @param {string} message - Tin nh·∫Øn ng∆∞·ªùi d√πng
     * @param {string} pageContext - Ng·ªØ c·∫£nh trang
     * @returns {Promise<string>} - Mock response
     */
    async getMockResponse(message, pageContext) {
        // Simulate API delay
        await this.delay(1000 + Math.random() * 2000);

        const pageType = getCurrentPageType();
        const lowerMessage = message.toLowerCase();

        // Mock responses based on page and message content
        const mockResponses = {
            'index': {
                'gi·ªõi thi·ªáu': 'üèõÔ∏è **Tr√† Vinh** l√† t·ªânh ven bi·ªÉn thu·ªôc ƒë·ªìng b·∫±ng s√¥ng C·ª≠u Long, n·ªïi ti·∫øng v·ªõi vƒÉn h√≥a Khmer ƒë·∫∑c s·∫Øc v√† h∆°n 140 ng√¥i ch√πa c·ªï k√≠nh.',
                'ƒë·ªãa ƒëi·ªÉm': 'üó∫Ô∏è **ƒê·ªãa ƒëi·ªÉm n·ªïi b·∫≠t:** Ch√πa Ang, Ao B√† Om, Ch√πa Hang, B·∫£o t√†ng Khmer, C√π lao T√¢n Quy...',
                '·∫©m th·ª±c': 'üçú **ƒê·∫∑c s·∫£n:** B√°nh t√©t l√° c·∫©m, ch√°o c√° linh b√¥ng ƒëi√™n ƒëi·ªÉn, b√°nh x√®o mi·ªÅn T√¢y, c√† ri g√† Khmer...',
                'default': 'ü§ñ Xin ch√†o! T√¥i l√† AI tr·ª£ l√Ω du l·ªãch Tr√† Vinh. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ ƒë·ªãa ƒëi·ªÉm, ·∫©m th·ª±c v√† l·∫≠p k·∫ø ho·∫°ch du l·ªãch.'
            },
            'dia-diem': {
                'ch√πa': 'üèõÔ∏è **Ch√πa Khmer n·ªïi ti·∫øng:** Ch√πa Ang (l√¢u ƒë·ªùi nh·∫•t), Ch√πa Hang (trong hang ƒë·ªông), Ch√πa C√≤ (c√≥ ƒë√†n c√≤ tr·∫Øng)...',
                'ao b√† om': 'üåä **Ao B√† Om** l√† h·ªì c·ªï th·ª• linh thi√™ng v·ªõi c√¢y ƒëa c·ªï th·ª• h√†ng trƒÉm nƒÉm tu·ªïi, n∆°i t·ªï ch·ª©c l·ªÖ h·ªôi Ok Om Bok.',
                'default': 'üó∫Ô∏è T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm du l·ªãch, g·ª£i √Ω l·ªãch tr√¨nh v√† cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ c√°c ƒëi·ªÉm tham quan.'
            }
        };

        const pageResponses = mockResponses[pageType] || mockResponses['index'];
        
        // Find matching response
        for (const [key, response] of Object.entries(pageResponses)) {
            if (key !== 'default' && lowerMessage.includes(key)) {
                return response;
            }
        }

        return pageResponses.default;
    }

    /**
     * Th√™m tin nh·∫Øn v√†o l·ªãch s·ª≠
     * @param {string} role - Role (user/assistant)
     * @param {string} content - N·ªôi dung tin nh·∫Øn
     */
    addToHistory(role, content) {
        this.conversationHistory.push({
            role: role,
            content: content,
            timestamp: new Date()
        });

        // Gi·ªõi h·∫°n l·ªãch s·ª≠ (gi·ªØ 20 tin nh·∫Øn g·∫ßn nh·∫•t)
        if (this.conversationHistory.length > 20) {
            this.conversationHistory = this.conversationHistory.slice(-20);
        }
    }

    /**
     * X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i
     */
    clearHistory() {
        this.conversationHistory = [];
    }

    /**
     * Delay utility
     * @param {number} ms - Milliseconds to delay
     * @returns {Promise}
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i API
     * @returns {boolean} - True n·∫øu API s·∫µn s√†ng
     */
    isReady() {
        return !this.useMockResponses && !this.isProcessing;
    }

    /**
     * Get conversation history
     * @returns {Array} - L·ªãch s·ª≠ h·ªôi tho·∫°i
     */
    getHistory() {
        return this.conversationHistory;
    }
}

// Export service
window.GeminiAIService = GeminiAIService;
